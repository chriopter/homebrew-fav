name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write  # Needed for release creation

jobs:
  test:
    runs-on: macos-latest
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install test dependencies
      run: |
        brew tap bats-core/bats-core
        brew install bats-core shellcheck
    
    - name: Run shellcheck
      run: |
        # Only fail on errors and warnings, not info
        shellcheck -S warning fav
        shellcheck -S warning fav-completion.bash
    
    - name: Run tests
      run: |
        chmod +x ./fav
        bats test/*.bats

  check-release:
    runs-on: ubuntu-latest
    needs: test  # Only check for release after tests pass
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check if release needed
        id: check
        run: |
          # Extract version from script
          SCRIPT_VERSION=$(grep '^VERSION=' fav | cut -d'"' -f2)
          echo "Script version: $SCRIPT_VERSION"
          
          # Get latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          echo "Latest tag: $LATEST_VERSION"
          
          # Check if version is different from latest tag
          if [ "$SCRIPT_VERSION" = "$LATEST_VERSION" ]; then
            echo "Version $SCRIPT_VERSION already released"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "âœ… New release needed for version $SCRIPT_VERSION"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version=v$SCRIPT_VERSION" >> $GITHUB_OUTPUT
          fi

  release:
    needs: [check-release, test]
    if: needs.check-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get commit message
        id: commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%s)
          COMMIT_BODY=$(git log -1 --pretty=%b)
          
          if [ -n "$COMMIT_BODY" ]; then
            FULL_MESSAGE="$COMMIT_MESSAGE"$'\n\n'"$COMMIT_BODY"
          else
            FULL_MESSAGE="$COMMIT_MESSAGE"
          fi
          
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$FULL_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create tag and release
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ needs.check-release.outputs.version }}
          git push origin ${{ needs.check-release.outputs.version }}
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check-release.outputs.version }}
          release_name: Release ${{ needs.check-release.outputs.version }}
          body: ${{ steps.commit.outputs.message }}
          draft: false
          prerelease: false
      
      - name: Update Formula with version and SHA256
        run: |
          VERSION=${{ needs.check-release.outputs.version }}
          VERSION_NUM=${VERSION#v}
          TARBALL_URL="https://github.com/chriopter/homebrew-fav/archive/refs/tags/${VERSION}.tar.gz"
          
          # Wait for GitHub to process the release
          sleep 10
          
          # Download and calculate SHA256
          curl -sL "$TARBALL_URL" -o fav.tar.gz
          SHA256=$(shasum -a 256 fav.tar.gz | cut -d' ' -f1)
          
          # Update both URL and SHA256 in formula
          sed -i "s|/archive/refs/tags/v[0-9]\+\.[0-9]\+\.[0-9]\+\.tar\.gz|/archive/refs/tags/v${VERSION_NUM}.tar.gz|" Formula/fav.rb
          sed -i "s|sha256 \".*\"|sha256 \"$SHA256\"|" Formula/fav.rb
          
          # Commit and push
          git add Formula/fav.rb
          git commit -m "Update formula for ${VERSION} [skip ci]"
          git push